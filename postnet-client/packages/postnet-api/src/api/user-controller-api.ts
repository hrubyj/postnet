/* tslint:disable */
/* eslint-disable */
/**
 * POSTNET API
 * API k semestrální práce z PIA
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationVO } from '../model';
// @ts-ignore
import { CredentialsVO } from '../model';
// @ts-ignore
import { RegistrationVO } from '../model';
// @ts-ignore
import { UserVO } from '../model';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint pro získání všech uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (fulltext?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/getAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fulltext !== undefined) {
                localVarQueryParameter['fulltext'] = fulltext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání blokovaných uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocked: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/getBlocked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/getFriends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrangers: async (fulltext?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/getStrangers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fulltext !== undefined) {
                localVarQueryParameter['fulltext'] = fulltext;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro přihlášení uživatele
         * @param {CredentialsVO} credentialsVO Tělo pro přihlašovací údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (credentialsVO: CredentialsVO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'credentialsVO' is not null or undefined
            assertParamExists('loginUser', 'credentialsVO', credentialsVO)
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credentialsVO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro registraci nového uživatele
         * @param {RegistrationVO} registrationVO Tělo pro registrační údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (registrationVO: RegistrationVO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationVO' is not null or undefined
            assertParamExists('registerUser', 'registrationVO', registrationVO)
            const localVarPath = `/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationVO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint pro získání všech uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(fulltext?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(fulltext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání blokovaných uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlocked(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlocked(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFriends(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFriends(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStrangers(fulltext?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStrangers(fulltext, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro přihlášení uživatele
         * @param {CredentialsVO} credentialsVO Tělo pro přihlašovací údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(credentialsVO: CredentialsVO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationVO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(credentialsVO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro registraci nového uživatele
         * @param {RegistrationVO} registrationVO Tělo pro registrační údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(registrationVO: RegistrationVO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(registrationVO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * Endpoint pro získání všech uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(fulltext?: string, options?: any): AxiosPromise<Array<UserVO>> {
            return localVarFp.getAllUsers(fulltext, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání blokovaných uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlocked(options?: any): AxiosPromise<Array<UserVO>> {
            return localVarFp.getBlocked(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFriends(options?: any): AxiosPromise<Array<UserVO>> {
            return localVarFp.getFriends(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání dosud nespřátelených uživatelů
         * @param {string} [fulltext] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrangers(fulltext?: string, options?: any): AxiosPromise<Array<UserVO>> {
            return localVarFp.getStrangers(fulltext, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro přihlášení uživatele
         * @param {CredentialsVO} credentialsVO Tělo pro přihlašovací údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(credentialsVO: CredentialsVO, options?: any): AxiosPromise<AuthenticationVO> {
            return localVarFp.loginUser(credentialsVO, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro registraci nového uživatele
         * @param {RegistrationVO} registrationVO Tělo pro registrační údaje
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(registrationVO: RegistrationVO, options?: any): AxiosPromise<void> {
            return localVarFp.registerUser(registrationVO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - interface
 * @export
 * @interface UserControllerApi
 */
export interface UserControllerApiInterface {
    /**
     * Endpoint pro získání všech uživatelů
     * @param {string} [fulltext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    getAllUsers(fulltext?: string, options?: any): AxiosPromise<Array<UserVO>>;

    /**
     * Endpoint pro získání blokovaných uživatelů
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    getBlocked(options?: any): AxiosPromise<Array<UserVO>>;

    /**
     * Endpoint pro získání dosud nespřátelených uživatelů
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    getFriends(options?: any): AxiosPromise<Array<UserVO>>;

    /**
     * Endpoint pro získání dosud nespřátelených uživatelů
     * @param {string} [fulltext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    getStrangers(fulltext?: string, options?: any): AxiosPromise<Array<UserVO>>;

    /**
     * Endpoint pro přihlášení uživatele
     * @param {CredentialsVO} credentialsVO Tělo pro přihlašovací údaje
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    loginUser(credentialsVO: CredentialsVO, options?: any): AxiosPromise<AuthenticationVO>;

    /**
     * Endpoint pro registraci nového uživatele
     * @param {RegistrationVO} registrationVO Tělo pro registrační údaje
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    registerUser(registrationVO: RegistrationVO, options?: any): AxiosPromise<void>;

}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI implements UserControllerApiInterface {
    /**
     * Endpoint pro získání všech uživatelů
     * @param {string} [fulltext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getAllUsers(fulltext?: string, options?: any) {
        return UserControllerApiFp(this.configuration).getAllUsers(fulltext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání blokovaných uživatelů
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getBlocked(options?: any) {
        return UserControllerApiFp(this.configuration).getBlocked(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání dosud nespřátelených uživatelů
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getFriends(options?: any) {
        return UserControllerApiFp(this.configuration).getFriends(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání dosud nespřátelených uživatelů
     * @param {string} [fulltext] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getStrangers(fulltext?: string, options?: any) {
        return UserControllerApiFp(this.configuration).getStrangers(fulltext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro přihlášení uživatele
     * @param {CredentialsVO} credentialsVO Tělo pro přihlašovací údaje
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public loginUser(credentialsVO: CredentialsVO, options?: any) {
        return UserControllerApiFp(this.configuration).loginUser(credentialsVO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro registraci nového uživatele
     * @param {RegistrationVO} registrationVO Tělo pro registrační údaje
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public registerUser(registrationVO: RegistrationVO, options?: any) {
        return UserControllerApiFp(this.configuration).registerUser(registrationVO, options).then((request) => request(this.axios, this.basePath));
    }
}
