/* tslint:disable */
/* eslint-disable */
/**
 * POSTNET API
 * API k semestrální práce z PIA
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PostVO } from '../model';
/**
 * PostControllerApi - axios parameter creator
 * @export
 */
export const PostControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint pro vytváření příspěvků
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (postVO: PostVO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postVO' is not null or undefined
            assertParamExists('createPost', 'postVO', postVO)
            const localVarPath = `/posts/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postVO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání starších příspěvků
         * @param {string} until 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOldPosts: async (until: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'until' is not null or undefined
            assertParamExists('getOldPosts', 'until', until)
            const localVarPath = `/posts/getOldPosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString() :
                    until;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání příspěvků
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (since?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostControllerApi - functional programming interface
 * @export
 */
export const PostControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint pro vytváření příspěvků
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(postVO: PostVO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(postVO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání starších příspěvků
         * @param {string} until 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOldPosts(until: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOldPosts(until, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání příspěvků
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(since?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(since, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostControllerApi - factory interface
 * @export
 */
export const PostControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostControllerApiFp(configuration)
    return {
        /**
         * Endpoint pro vytváření příspěvků
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(postVO: PostVO, options?: any): AxiosPromise<void> {
            return localVarFp.createPost(postVO, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání starších příspěvků
         * @param {string} until 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOldPosts(until: string, options?: any): AxiosPromise<Array<PostVO>> {
            return localVarFp.getOldPosts(until, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání příspěvků
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(since?: string, options?: any): AxiosPromise<Array<PostVO>> {
            return localVarFp.getPosts(since, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostControllerApi - interface
 * @export
 * @interface PostControllerApi
 */
export interface PostControllerApiInterface {
    /**
     * Endpoint pro vytváření příspěvků
     * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApiInterface
     */
    createPost(postVO: PostVO, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro získání starších příspěvků
     * @param {string} until 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApiInterface
     */
    getOldPosts(until: string, options?: any): AxiosPromise<Array<PostVO>>;

    /**
     * Endpoint pro získání příspěvků
     * @param {string} [since] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApiInterface
     */
    getPosts(since?: string, options?: any): AxiosPromise<Array<PostVO>>;

}

/**
 * PostControllerApi - object-oriented interface
 * @export
 * @class PostControllerApi
 * @extends {BaseAPI}
 */
export class PostControllerApi extends BaseAPI implements PostControllerApiInterface {
    /**
     * Endpoint pro vytváření příspěvků
     * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApi
     */
    public createPost(postVO: PostVO, options?: any) {
        return PostControllerApiFp(this.configuration).createPost(postVO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání starších příspěvků
     * @param {string} until 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApi
     */
    public getOldPosts(until: string, options?: any) {
        return PostControllerApiFp(this.configuration).getOldPosts(until, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání příspěvků
     * @param {string} [since] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostControllerApi
     */
    public getPosts(since?: string, options?: any) {
        return PostControllerApiFp(this.configuration).getPosts(since, options).then((request) => request(this.axios, this.basePath));
    }
}
