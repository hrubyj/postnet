/* tslint:disable */
/* eslint-disable */
/**
 * POSTNET API
 * API k semestrální práce z PIA
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminRoleVO } from '../model';
// @ts-ignore
import { PostVO } from '../model';
/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint pro vytváření oznámení
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement: async (postVO: PostVO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postVO' is not null or undefined
            assertParamExists('createAnnouncement', 'postVO', postVO)
            const localVarPath = `/admin/announcement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postVO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro vytváření oznámení
         * @param {AdminRoleVO} adminRoleVO Tělo pro nastavení role uživatele
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminRole: async (adminRoleVO: AdminRoleVO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminRoleVO' is not null or undefined
            assertParamExists('setAdminRole', 'adminRoleVO', adminRoleVO)
            const localVarPath = `/admin/setAdminRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminRoleVO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint pro vytváření oznámení
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnouncement(postVO: PostVO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnouncement(postVO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro vytváření oznámení
         * @param {AdminRoleVO} adminRoleVO Tělo pro nastavení role uživatele
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAdminRole(adminRoleVO: AdminRoleVO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAdminRole(adminRoleVO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminControllerApiFp(configuration)
    return {
        /**
         * Endpoint pro vytváření oznámení
         * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnouncement(postVO: PostVO, options?: any): AxiosPromise<void> {
            return localVarFp.createAnnouncement(postVO, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro vytváření oznámení
         * @param {AdminRoleVO} adminRoleVO Tělo pro nastavení role uživatele
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminRole(adminRoleVO: AdminRoleVO, options?: any): AxiosPromise<void> {
            return localVarFp.setAdminRole(adminRoleVO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - interface
 * @export
 * @interface AdminControllerApi
 */
export interface AdminControllerApiInterface {
    /**
     * Endpoint pro vytváření oznámení
     * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApiInterface
     */
    createAnnouncement(postVO: PostVO, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro vytváření oznámení
     * @param {AdminRoleVO} adminRoleVO Tělo pro nastavení role uživatele
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApiInterface
     */
    setAdminRole(adminRoleVO: AdminRoleVO, options?: any): AxiosPromise<void>;

}

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI implements AdminControllerApiInterface {
    /**
     * Endpoint pro vytváření oznámení
     * @param {PostVO} postVO Tělo pro vytvoření nového příspěvku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public createAnnouncement(postVO: PostVO, options?: any) {
        return AdminControllerApiFp(this.configuration).createAnnouncement(postVO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro vytváření oznámení
     * @param {AdminRoleVO} adminRoleVO Tělo pro nastavení role uživatele
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public setAdminRole(adminRoleVO: AdminRoleVO, options?: any) {
        return AdminControllerApiFp(this.configuration).setAdminRole(adminRoleVO, options).then((request) => request(this.axios, this.basePath));
    }
}
