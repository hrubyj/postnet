/* tslint:disable */
/* eslint-disable */
/**
 * POSTNET API
 * API k semestrální práce z PIA
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserVO } from '../model';
/**
 * FriendshipControllerApi - axios parameter creator
 * @export
 */
export const FriendshipControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint pro potvrzení přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFriendship: async (friendId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('confirmFriendship', 'friendId', friendId)
            const localVarPath = `/friendship/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (friendId !== undefined) {
                localVarQueryParameter['friendId'] = friendId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro vytváření blokací
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlock: async (friendId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('createBlock', 'friendId', friendId)
            const localVarPath = `/friendship/block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (friendId !== undefined) {
                localVarQueryParameter['friendId'] = friendId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro vytváření nových přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship: async (friendId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('createFriendship', 'friendId', friendId)
            const localVarPath = `/friendship/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (friendId !== undefined) {
                localVarQueryParameter['friendId'] = friendId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro zrušení přátelství/blokace
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship: async (friendId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'friendId' is not null or undefined
            assertParamExists('deleteFriendship', 'friendId', friendId)
            const localVarPath = `/friendship/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (friendId !== undefined) {
                localVarQueryParameter['friendId'] = friendId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint pro získání žádostí o přátelství
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/friendship/getRequests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JsonWebToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendshipControllerApi - functional programming interface
 * @export
 */
export const FriendshipControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FriendshipControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint pro potvrzení přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmFriendship(friendId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmFriendship(friendId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro vytváření blokací
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBlock(friendId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBlock(friendId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro vytváření nových přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFriendship(friendId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFriendship(friendId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro zrušení přátelství/blokace
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFriendship(friendId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFriendship(friendId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint pro získání žádostí o přátelství
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequests(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserVO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequests(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FriendshipControllerApi - factory interface
 * @export
 */
export const FriendshipControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FriendshipControllerApiFp(configuration)
    return {
        /**
         * Endpoint pro potvrzení přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFriendship(friendId: number, options?: any): AxiosPromise<void> {
            return localVarFp.confirmFriendship(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro vytváření blokací
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBlock(friendId: number, options?: any): AxiosPromise<void> {
            return localVarFp.createBlock(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro vytváření nových přátelství
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFriendship(friendId: number, options?: any): AxiosPromise<void> {
            return localVarFp.createFriendship(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro zrušení přátelství/blokace
         * @param {number} friendId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFriendship(friendId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFriendship(friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint pro získání žádostí o přátelství
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests(options?: any): AxiosPromise<Array<UserVO>> {
            return localVarFp.getRequests(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendshipControllerApi - interface
 * @export
 * @interface FriendshipControllerApi
 */
export interface FriendshipControllerApiInterface {
    /**
     * Endpoint pro potvrzení přátelství
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApiInterface
     */
    confirmFriendship(friendId: number, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro vytváření blokací
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApiInterface
     */
    createBlock(friendId: number, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro vytváření nových přátelství
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApiInterface
     */
    createFriendship(friendId: number, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro zrušení přátelství/blokace
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApiInterface
     */
    deleteFriendship(friendId: number, options?: any): AxiosPromise<void>;

    /**
     * Endpoint pro získání žádostí o přátelství
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApiInterface
     */
    getRequests(options?: any): AxiosPromise<Array<UserVO>>;

}

/**
 * FriendshipControllerApi - object-oriented interface
 * @export
 * @class FriendshipControllerApi
 * @extends {BaseAPI}
 */
export class FriendshipControllerApi extends BaseAPI implements FriendshipControllerApiInterface {
    /**
     * Endpoint pro potvrzení přátelství
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public confirmFriendship(friendId: number, options?: any) {
        return FriendshipControllerApiFp(this.configuration).confirmFriendship(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro vytváření blokací
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public createBlock(friendId: number, options?: any) {
        return FriendshipControllerApiFp(this.configuration).createBlock(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro vytváření nových přátelství
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public createFriendship(friendId: number, options?: any) {
        return FriendshipControllerApiFp(this.configuration).createFriendship(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro zrušení přátelství/blokace
     * @param {number} friendId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public deleteFriendship(friendId: number, options?: any) {
        return FriendshipControllerApiFp(this.configuration).deleteFriendship(friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint pro získání žádostí o přátelství
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendshipControllerApi
     */
    public getRequests(options?: any) {
        return FriendshipControllerApiFp(this.configuration).getRequests(options).then((request) => request(this.axios, this.basePath));
    }
}
